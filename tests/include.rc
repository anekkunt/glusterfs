M0=${M0:=/mnt/glusterfs/0};   # 0th mount point for FUSE
M1=${M1:=/mnt/glusterfs/1};   # 1st mount point for FUSE
N0=${N0:=/mnt/nfs/0};         # 0th mount point for NFS
N1=${N1:=/mnt/nfs/1};         # 1st mount point for NFS
V0=${V0:=patchy};             # volume name to use in tests
B0=${B0:=/d/backends};        # top level of brick directories
H0=${H0:=`hostname --fqdn`};  # hostname
DEBUG=${DEBUG:=0}             # turn on debugging?

CLI="gluster --mode=script";

mkdir -p $B0;
mkdir -p $M0 $M1;
mkdir -p $N0 $N1;

testcnt=`egrep '^[[:space:]]*(EXPECT|TEST|EXPECT_WITHIN|EXPECT_KEYWORD)' $0 | wc -l`;
echo 1..$testcnt

t=1

function dbg()
{
	[ "x$DEBUG" = "x0" ] || echo "$*" >&2;
}


function test_header()
{
	dbg "=========================";
	dbg "TEST $t (line $TESTLINE): $*";
}


function test_footer()
{
	RET=$?
        local err=$1

	if [ $RET -eq 0 ]; then
	     	echo "ok $t";
	else
                echo "not ok $t $err";
		if [ "$EXIT_EARLY" = "1" ]; then
			exit $RET
		fi
	fi

	dbg "RESULT $t: $RET";

	t=`expr $t + 1`;
}

function test_expect_footer()
{
        local e=$1
        local a=$2
        local err=""

        if [ "x${e}" != "x${a}" ]; then
                err="Got \"$a\" instead of \"$e\""
        fi
        [[ "x${e}" == "x${a}" ]];
        test_footer "$err";
}

function _EXPECT()
{
	TESTLINE=$1;
	shift;
        local a=""

	test_header "$@";

	e="$1";
	shift;
	a=$("$@" | tail -1)

	test_expect_footer "$e" "$a";
}

function _EXPECT_KEYWORD()
{
	TESTLINE=$1;
	shift;

	test_header "$@";

	e="$1";
	shift;
	"$@" | tail -1 | grep -q "$e"

	test_footer;
}


function _TEST()
{
	TESTLINE=$1;
	shift;
        local redirect=""

	test_header "$@";

        if [ "$1"="!" ]; then
                redirect="2>&1"
        fi

	eval "$@" >/dev/null $redirect

	test_footer;
}

function _EXPECT_WITHIN()
{
        TESTLINE=$1
        shift;

        local timeout=$1
        shift;

        test_header "$@"

        e=$1;
        shift;

        local endtime=$(( ${timeout}+`date +%s` ))

        local success=0
        while [ `date +%s` -lt $endtime ]; do
                "$@" | tail -1 | egrep -q "^${e}\$"
                if [ $? -eq 0 ]; then
                        success=1;
                        break;
                fi
                sleep 1;
        done

        if [ $success -eq 1 ]; then
                true;
        else
                false;
        fi

        test_footer;
}


function cleanup()
{
	killall -15 glusterfs glusterfsd glusterd 2>/dev/null || true;
	killall -9 glusterfs glusterfsd glusterd 2>/dev/null || true;
	rm -rf /var/lib/glusterd/* $B0/* /etc/glusterd/*;

	umount -l $M0 2>/dev/null || true;
	umount -l $M1 2>/dev/null || true;
	umount -l $N0 2>/dev/null || true;
	umount -l $N1 2>/dev/null || true;
}


alias EXPECT='_EXPECT $LINENO'
alias TEST='_TEST $LINENO'
alias EXPECT_WITHIN='_EXPECT_WITHIN $LINENO'
alias EXPECT_KEYWORD='_EXPECT_KEYWORD $LINENO'
shopt -s expand_aliases
